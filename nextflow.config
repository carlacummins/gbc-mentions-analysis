// includeConfig 'conf/modules.config'

workDir = '/hps/nobackup/cochrane/ena/users/carlac/gbc_mentions'

params {
    // General parameters
    resource_sql = 'SELECT short_name, common_name, full_name FROM resources WHERE is_latest = 1'
    aliases_json = '../data/resource_names.additional_aliases.json'
    local_xmls_path = '/nfs/production/literature/pmc/oa/'
    db_credentials_json = '../conf/db_credentials.json'
    chunks = 1000
    epmc_limit = 0
    model = '../data/models/scibert_resource_classifier.v2'
}

// duplicated settings from https://nf-co.re/configs/ebi_codon_slurm/
process {
    // this is to avoid errors for missing files due to shared filesystem latency
    maxRetries    = 3
    errorStrategy = { task.exitStatus == 0 ? "retry" : "terminate" }
    cache         = "lenient"
    afterScript   = "sleep 60"
}

executor {
    name            = "slurm"
    queueSize       = 2000
    submitRateLimit = "10/1sec"
    exitReadTimeout = "30 min"
    queueGlobalStatus = true
}

profiles {
    test {
        cleanup = false

        params {
            resource_sql = 'SELECT short_name, common_name, full_name FROM resources WHERE is_latest = 1 LIMIT 2'
            epmc_limit   = 10
            chunks       = 3
        }
    }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}